import { useState } from 'react';
import { PlusCircle, Timer, Book } from 'lucide-react';

const RecipeApp = () => {
  const [recipes, setRecipes] = useState([]);
  const [newRecipe, setNewRecipe] = useState({
    name: '',
    preparation_steps: '',
    cooking_time: 0,
    servings: 1,
    categories: '',
    tags: '',
    ingredients: [],
    timers: []
  });
  
  const addIngredient = () => {
    setNewRecipe({
      ...newRecipe,
      ingredients: [
        ...newRecipe.ingredients,
        {
          name: '',
          quantity: 0,
          unit: 'g',
          nutritional_values: {
            calories: 0,
            protein: 0,
            carbs: 0,
            fats: 0
          }
        }
      ]
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('http://localhost:8000/recipes/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newRecipe)
      });
      
      if (response.ok) {
        const result = await response.json();
        setRecipes([...recipes, result]);
        setNewRecipe({
          name: '',
          preparation_steps: '',
          cooking_time: 0,
          servings: 1,
          categories: '',
          tags: '',
          ingredients: [],
          timers: []
        });
      }
    } catch (error) {
      console.error('Error creating recipe:', error);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      <div className="mb-8 text-center">
        <h1 className="text-3xl font-bold mb-2">Plateful Recipe Manager</h1>
        <p className="text-gray-600">Create and manage your favorite recipes</p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6 bg-white p-6 rounded-lg shadow-md">
        <div>
          <label className="block text-sm font-medium mb-2">Recipe Name</label>
          <input
            type="text"
            value={newRecipe.name}
            onChange={(e) => setNewRecipe({...newRecipe, name: e.target.value})}
            className="w-full p-2 border rounded"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Preparation Steps</label>
          <textarea
            value={newRecipe.preparation_steps}
            onChange={(e) => setNewRecipe({...newRecipe, preparation_steps: e.target.value})}
            className="w-full p-2 border rounded h-32"
            required
          />
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">Cooking Time (minutes)</label>
            <input
              type="number"
              value={newRecipe.cooking_time}
              onChange={(e) => setNewRecipe({...newRecipe, cooking_time: parseInt(e.target.value)})}
              className="w-full p-2 border rounded"
              min="0"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">Servings</label>
            <input
              type="number"
              value={newRecipe.servings}
              onChange={(e) => setNewRecipe({...newRecipe, servings: parseInt(e.target.value)})}
              className="w-full p-2 border rounded"
              min="1"
              required
            />
          </div>
        </div>

        <div>
          <h3 className="text-lg font-medium mb-4">Ingredients</h3>
          {newRecipe.ingredients.map((ingredient, index) => (
            <div key={index} className="mb-4 p-4 border rounded">
              <div className="grid grid-cols-2 gap-4 mb-2">
                <input
                  placeholder="Ingredient name"
                  value={ingredient.name}
                  onChange={(e) => {
                    const updated = [...newRecipe.ingredients];
                    updated[index].name = e.target.value;
                    setNewRecipe({...newRecipe, ingredients: updated});
                  }}
                  className="p-2 border rounded"
                />
                <div className="flex gap-2">
                  <input
                    type="number"
                    value={ingredient.quantity}
                    onChange={(e) => {
                      const updated = [...newRecipe.ingredients];
                      updated[index].quantity = parseFloat(e.target.value);
                      setNewRecipe({...newRecipe, ingredients: updated});
                    }}
                    className="p-2 border rounded w-24"
                    min="0"
                  />
                  <select
                    value={ingredient.unit}
                    onChange={(e) => {
                      const updated = [...newRecipe.ingredients];
                      updated[index].unit = e.target.value;
                      setNewRecipe({...newRecipe, ingredients: updated});
                    }}
                    className="p-2 border rounded"
                  >
                    <option value="g">g</option>
                    <option value="ml">ml</option>
                    <option value="pcs">pcs</option>
                  </select>
                </div>
              </div>
            </div>
          ))}
          <button
            type="button"
            onClick={addIngredient}
            className="flex items-center gap-2 text-blue-600 hover:text-blue-800"
          >
            <PlusCircle className="w-5 h-5" />
            Add Ingredient
          </button>
        </div>

        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 flex items-center justify-center gap-2"
        >
          <Book className="w-5 h-5" />
          Save Recipe
        </button>
      </form>
    </div>
  );
};

export default RecipeApp;